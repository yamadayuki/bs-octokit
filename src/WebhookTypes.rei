type str_or_int =
  | Str(string)
  | Int(int);
type webhookPayloadWatchSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadTeamAddSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadTeamAddOrganization = {
  login: string,
  id: int,
  node_id: string,
  url: string,
  repos_url: string,
  events_url: string,
  hooks_url: string,
  issues_url: string,
  members_url: string,
  public_members_url: string,
  avatar_url: string,
  description: string,
};
type webhookPayloadTeamAddTeam = {
  name: string,
  id: int,
  node_id: string,
  slug: string,
  description: string,
  privacy: string,
  url: string,
  members_url: string,
  repositories_url: string,
  permission: string,
};
type webhookPayloadTeamSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadTeamOrganization = {
  login: string,
  id: int,
  node_id: string,
  url: string,
  repos_url: string,
  events_url: string,
  hooks_url: string,
  issues_url: string,
  members_url: string,
  public_members_url: string,
  avatar_url: string,
  description: string,
};
type payloadRepositoryPermissions = {
  pull: bool,
  push: bool,
  admin: bool,
};
type webhookPayloadTeamTeam = {
  name: string,
  id: int,
  node_id: string,
  slug: string,
  description: string,
  privacy: string,
  url: string,
  members_url: string,
  repositories_url: string,
  permission: string,
};
type webhookPayloadStatusSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadStatusBranchesItemCommit = {
  sha: string,
  url: string,
};
type webhookPayloadStatusBranchesItem = {
  name: string,
  commit: webhookPayloadStatusBranchesItemCommit,
};
type webhookPayloadStatusCommitCommitter = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadStatusCommitAuthor = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadStatusCommitCommitVerification = {
  verified: bool,
  reason: string,
  signature: string,
  payload: string,
};
type webhookPayloadStatusCommitCommitTree = {
  sha: string,
  url: string,
};
type webhookPayloadStatusCommitCommitCommitter = {
  name: string,
  email: string,
  date: string,
};
type webhookPayloadStatusCommitCommitAuthor = {
  name: string,
  email: string,
  date: string,
};
type webhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion = {
  identifier: string,
};
type webhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItemPackage = {
  ecosystem: string,
  name: string,
};
type webhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItem = {
  package: webhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItemPackage,
  severity: string,
  vulnerable_version_range: string,
  first_patched_version: webhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion,
};
type webhookPayloadSecurityAdvisorySecurityAdvisoryReferencesItem = {
  url: string,
};
type webhookPayloadSecurityAdvisorySecurityAdvisoryIdentifiersItem = {
  value: string,
  type_: string,
};
type webhookPayloadSecurityAdvisorySecurityAdvisory = {
  ghsa_id: string,
  summary: string,
  description: string,
  severity: string,
  identifiers:
    array(webhookPayloadSecurityAdvisorySecurityAdvisoryIdentifiersItem),
  references:
    array(webhookPayloadSecurityAdvisorySecurityAdvisoryReferencesItem),
  published_at: string,
  updated_at: string,
  withdrawn_at: Js.Null.t(string),
  vulnerabilities:
    array(webhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItem),
};
type webhookPayloadSecurityAdvisory = {
  action: string,
  security_advisory: webhookPayloadSecurityAdvisorySecurityAdvisory,
};
type webhookPayloadRepositoryVulnerabilityAlertAlertDismisser = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadRepositoryVulnerabilityAlertAlert = {
  id: int,
  affected_range: string,
  affected_package_name: string,
  external_reference: string,
  external_identifier: string,
  fixed_in: string,
  dismisser: webhookPayloadRepositoryVulnerabilityAlertAlertDismisser,
  dismiss_reason: string,
  dismissed_at: string,
};
type webhookPayloadRepositoryVulnerabilityAlert = {
  action: string,
  alert: webhookPayloadRepositoryVulnerabilityAlertAlert,
};
type webhookPayloadRepositoryImportSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadRepositoryImportOrganization = {
  login: string,
  id: int,
  node_id: string,
  url: string,
  repos_url: string,
  events_url: string,
  hooks_url: string,
  issues_url: string,
  members_url: string,
  public_members_url: string,
  avatar_url: string,
  description: string,
};
type webhookPayloadRepositorySender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadReleaseSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadReleaseReleaseAuthor = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadReleaseRelease = {
  url: string,
  assets_url: string,
  upload_url: string,
  html_url: string,
  id: int,
  node_id: string,
  tag_name: string,
  target_commitish: string,
  name: Js.Null.t(string),
  draft: bool,
  author: webhookPayloadReleaseReleaseAuthor,
  prerelease: bool,
  created_at: string,
  published_at: string,
  assets: array(Js.Types.obj_val),
  tarball_url: string,
  zipball_url: string,
  body: Js.Null.t(string),
};
type webhookPayloadPushSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPushPusher = {
  name: string,
  email: string,
};
type webhookPayloadPullRequestReviewCommentSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPullRequestReviewCommentPullRequestLinksStatuses = {
  href: string,
};
type webhookPayloadPullRequestReviewCommentPullRequestLinksCommits = {
  href: string,
};
type webhookPayloadPullRequestReviewCommentPullRequestLinksReviewComment = {
  href: string,
};
type webhookPayloadPullRequestReviewCommentPullRequestLinksReviewComments = {
  href: string,
};
type webhookPayloadPullRequestReviewCommentPullRequestLinksComments = {
  href: string,
};
type webhookPayloadPullRequestReviewCommentPullRequestLinksIssue = {
  href: string,
};
type webhookPayloadPullRequestReviewCommentPullRequestLinksHtml = {
  href: string,
};
type webhookPayloadPullRequestReviewCommentPullRequestLinksSelf = {
  href: string,
};
type webhookPayloadPullRequestReviewCommentPullRequestLinks = {
  self: webhookPayloadPullRequestReviewCommentPullRequestLinksSelf,
  html: webhookPayloadPullRequestReviewCommentPullRequestLinksHtml,
  issue: webhookPayloadPullRequestReviewCommentPullRequestLinksIssue,
  comments: webhookPayloadPullRequestReviewCommentPullRequestLinksComments,
  review_comments: webhookPayloadPullRequestReviewCommentPullRequestLinksReviewComments,
  review_comment: webhookPayloadPullRequestReviewCommentPullRequestLinksReviewComment,
  commits: webhookPayloadPullRequestReviewCommentPullRequestLinksCommits,
  statuses: webhookPayloadPullRequestReviewCommentPullRequestLinksStatuses,
};
type webhookPayloadPullRequestReviewCommentPullRequestBaseRepoOwner = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPullRequestReviewCommentPullRequestBaseRepo = {
  id: int,
  node_id: string,
  name: string,
  full_name: string,
  owner: webhookPayloadPullRequestReviewCommentPullRequestBaseRepoOwner,
  private: bool,
  html_url: string,
  description: Js.Null.t(string),
  fork: bool,
  url: string,
  forks_url: string,
  keys_url: string,
  collaborators_url: string,
  teams_url: string,
  hooks_url: string,
  issue_events_url: string,
  events_url: string,
  assignees_url: string,
  branches_url: string,
  tags_url: string,
  blobs_url: string,
  git_tags_url: string,
  git_refs_url: string,
  trees_url: string,
  statuses_url: string,
  languages_url: string,
  stargazers_url: string,
  contributors_url: string,
  subscribers_url: string,
  subscription_url: string,
  commits_url: string,
  git_commits_url: string,
  comments_url: string,
  issue_comment_url: string,
  contents_url: string,
  compare_url: string,
  merges_url: string,
  archive_url: string,
  downloads_url: string,
  issues_url: string,
  pulls_url: string,
  milestones_url: string,
  notifications_url: string,
  labels_url: string,
  releases_url: string,
  deployments_url: string,
  created_at: string,
  updated_at: string,
  pushed_at: string,
  git_url: string,
  ssh_url: string,
  clone_url: string,
  svn_url: string,
  homepage: Js.Null.t(string),
  size: int,
  stargazers_count: int,
  watchers_count: int,
  language: Js.Null.t(string),
  has_issues: bool,
  has_projects: bool,
  has_downloads: bool,
  has_wiki: bool,
  has_pages: bool,
  forks_count: int,
  mirror_url: Js.Null.t(string),
  archived: bool,
  open_issues_count: int,
  license: Js.Null.t(string),
  forks: int,
  open_issues: int,
  watchers: int,
  default_branch: string,
};
type webhookPayloadPullRequestReviewCommentPullRequestBaseUser = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPullRequestReviewCommentPullRequestBase = {
  label: string,
  ref: string,
  sha: string,
  user: webhookPayloadPullRequestReviewCommentPullRequestBaseUser,
  repo: webhookPayloadPullRequestReviewCommentPullRequestBaseRepo,
};
type webhookPayloadPullRequestReviewCommentPullRequestHeadRepoOwner = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPullRequestReviewCommentPullRequestHeadRepo = {
  id: int,
  node_id: string,
  name: string,
  full_name: string,
  owner: webhookPayloadPullRequestReviewCommentPullRequestHeadRepoOwner,
  private: bool,
  html_url: string,
  description: Js.Null.t(string),
  fork: bool,
  url: string,
  forks_url: string,
  keys_url: string,
  collaborators_url: string,
  teams_url: string,
  hooks_url: string,
  issue_events_url: string,
  events_url: string,
  assignees_url: string,
  branches_url: string,
  tags_url: string,
  blobs_url: string,
  git_tags_url: string,
  git_refs_url: string,
  trees_url: string,
  statuses_url: string,
  languages_url: string,
  stargazers_url: string,
  contributors_url: string,
  subscribers_url: string,
  subscription_url: string,
  commits_url: string,
  git_commits_url: string,
  comments_url: string,
  issue_comment_url: string,
  contents_url: string,
  compare_url: string,
  merges_url: string,
  archive_url: string,
  downloads_url: string,
  issues_url: string,
  pulls_url: string,
  milestones_url: string,
  notifications_url: string,
  labels_url: string,
  releases_url: string,
  deployments_url: string,
  created_at: string,
  updated_at: string,
  pushed_at: string,
  git_url: string,
  ssh_url: string,
  clone_url: string,
  svn_url: string,
  homepage: Js.Null.t(string),
  size: int,
  stargazers_count: int,
  watchers_count: int,
  language: Js.Null.t(string),
  has_issues: bool,
  has_projects: bool,
  has_downloads: bool,
  has_wiki: bool,
  has_pages: bool,
  forks_count: int,
  mirror_url: Js.Null.t(string),
  archived: bool,
  open_issues_count: int,
  license: Js.Null.t(string),
  forks: int,
  open_issues: int,
  watchers: int,
  default_branch: string,
};
type webhookPayloadPullRequestReviewCommentPullRequestHeadUser = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPullRequestReviewCommentPullRequestHead = {
  label: string,
  ref: string,
  sha: string,
  user: webhookPayloadPullRequestReviewCommentPullRequestHeadUser,
  repo: webhookPayloadPullRequestReviewCommentPullRequestHeadRepo,
};
type webhookPayloadPullRequestReviewCommentPullRequestUser = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPullRequestReviewCommentPullRequest = {
  url: string,
  id: int,
  node_id: string,
  html_url: string,
  diff_url: string,
  patch_url: string,
  issue_url: string,
  int,
  state: string,
  locked: bool,
  title: string,
  user: webhookPayloadPullRequestReviewCommentPullRequestUser,
  body: string,
  created_at: string,
  updated_at: string,
  closed_at: Js.Null.t(string),
  merged_at: Js.Null.t(string),
  merge_commit_sha: string,
  assignee: Js.Null.t(string),
  assignees: array(Js.Types.obj_val),
  requested_reviewers: array(Js.Types.obj_val),
  requested_teams: array(Js.Types.obj_val),
  labels: array(Js.Types.obj_val),
  milestone: Js.Null.t(string),
  commits_url: string,
  review_comments_url: string,
  review_comment_url: string,
  comments_url: string,
  statuses_url: string,
  head: webhookPayloadPullRequestReviewCommentPullRequestHead,
  base: webhookPayloadPullRequestReviewCommentPullRequestBase,
  _links: webhookPayloadPullRequestReviewCommentPullRequestLinks,
  author_association: string,
};
type webhookPayloadPullRequestReviewCommentCommentLinksPullRequest = {
  href: string,
};
type webhookPayloadPullRequestReviewCommentCommentLinksHtml = {href: string};
type webhookPayloadPullRequestReviewCommentCommentLinksSelf = {href: string};
type webhookPayloadPullRequestReviewCommentCommentLinks = {
  self: webhookPayloadPullRequestReviewCommentCommentLinksSelf,
  html: webhookPayloadPullRequestReviewCommentCommentLinksHtml,
  pull_request: webhookPayloadPullRequestReviewCommentCommentLinksPullRequest,
};
type webhookPayloadPullRequestReviewCommentCommentUser = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPullRequestReviewCommentComment = {
  url: string,
  pull_request_review_id: int,
  id: int,
  node_id: string,
  diff_hunk: string,
  path: string,
  position: int,
  original_position: int,
  commit_id: string,
  original_commit_id: string,
  user: webhookPayloadPullRequestReviewCommentCommentUser,
  body: string,
  created_at: string,
  updated_at: string,
  html_url: string,
  pull_request_url: string,
  author_association: string,
  _links: webhookPayloadPullRequestReviewCommentCommentLinks,
};
type webhookPayloadPullRequestReviewSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPullRequestReviewPullRequestLinksStatuses = {href: string};
type webhookPayloadPullRequestReviewPullRequestLinksCommits = {href: string};
type webhookPayloadPullRequestReviewPullRequestLinksReviewComment = {
  href: string,
};
type webhookPayloadPullRequestReviewPullRequestLinksReviewComments = {
  href: string,
};
type webhookPayloadPullRequestReviewPullRequestLinksComments = {href: string};
type webhookPayloadPullRequestReviewPullRequestLinksIssue = {href: string};
type webhookPayloadPullRequestReviewPullRequestLinksHtml = {href: string};
type webhookPayloadPullRequestReviewPullRequestLinksSelf = {href: string};
type webhookPayloadPullRequestReviewPullRequestLinks = {
  self: webhookPayloadPullRequestReviewPullRequestLinksSelf,
  html: webhookPayloadPullRequestReviewPullRequestLinksHtml,
  issue: webhookPayloadPullRequestReviewPullRequestLinksIssue,
  comments: webhookPayloadPullRequestReviewPullRequestLinksComments,
  review_comments: webhookPayloadPullRequestReviewPullRequestLinksReviewComments,
  review_comment: webhookPayloadPullRequestReviewPullRequestLinksReviewComment,
  commits: webhookPayloadPullRequestReviewPullRequestLinksCommits,
  statuses: webhookPayloadPullRequestReviewPullRequestLinksStatuses,
};
type webhookPayloadPullRequestReviewPullRequestBaseRepoOwner = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPullRequestReviewPullRequestBaseRepo = {
  id: int,
  node_id: string,
  name: string,
  full_name: string,
  owner: webhookPayloadPullRequestReviewPullRequestBaseRepoOwner,
  private: bool,
  html_url: string,
  description: Js.Null.t(string),
  fork: bool,
  url: string,
  forks_url: string,
  keys_url: string,
  collaborators_url: string,
  teams_url: string,
  hooks_url: string,
  issue_events_url: string,
  events_url: string,
  assignees_url: string,
  branches_url: string,
  tags_url: string,
  blobs_url: string,
  git_tags_url: string,
  git_refs_url: string,
  trees_url: string,
  statuses_url: string,
  languages_url: string,
  stargazers_url: string,
  contributors_url: string,
  subscribers_url: string,
  subscription_url: string,
  commits_url: string,
  git_commits_url: string,
  comments_url: string,
  issue_comment_url: string,
  contents_url: string,
  compare_url: string,
  merges_url: string,
  archive_url: string,
  downloads_url: string,
  issues_url: string,
  pulls_url: string,
  milestones_url: string,
  notifications_url: string,
  labels_url: string,
  releases_url: string,
  deployments_url: string,
  created_at: string,
  updated_at: string,
  pushed_at: string,
  git_url: string,
  ssh_url: string,
  clone_url: string,
  svn_url: string,
  homepage: Js.Null.t(string),
  size: int,
  stargazers_count: int,
  watchers_count: int,
  language: Js.Null.t(string),
  has_issues: bool,
  has_projects: bool,
  has_downloads: bool,
  has_wiki: bool,
  has_pages: bool,
  forks_count: int,
  mirror_url: Js.Null.t(string),
  archived: bool,
  open_issues_count: int,
  license: Js.Null.t(string),
  forks: int,
  open_issues: int,
  watchers: int,
  default_branch: string,
};
type webhookPayloadPullRequestReviewPullRequestBaseUser = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPullRequestReviewPullRequestBase = {
  label: string,
  ref: string,
  sha: string,
  user: webhookPayloadPullRequestReviewPullRequestBaseUser,
  repo: webhookPayloadPullRequestReviewPullRequestBaseRepo,
};
type webhookPayloadPullRequestReviewPullRequestHeadRepoOwner = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPullRequestReviewPullRequestHeadRepo = {
  id: int,
  node_id: string,
  name: string,
  full_name: string,
  owner: webhookPayloadPullRequestReviewPullRequestHeadRepoOwner,
  private: bool,
  html_url: string,
  description: Js.Null.t(string),
  fork: bool,
  url: string,
  forks_url: string,
  keys_url: string,
  collaborators_url: string,
  teams_url: string,
  hooks_url: string,
  issue_events_url: string,
  events_url: string,
  assignees_url: string,
  branches_url: string,
  tags_url: string,
  blobs_url: string,
  git_tags_url: string,
  git_refs_url: string,
  trees_url: string,
  statuses_url: string,
  languages_url: string,
  stargazers_url: string,
  contributors_url: string,
  subscribers_url: string,
  subscription_url: string,
  commits_url: string,
  git_commits_url: string,
  comments_url: string,
  issue_comment_url: string,
  contents_url: string,
  compare_url: string,
  merges_url: string,
  archive_url: string,
  downloads_url: string,
  issues_url: string,
  pulls_url: string,
  milestones_url: string,
  notifications_url: string,
  labels_url: string,
  releases_url: string,
  deployments_url: string,
  created_at: string,
  updated_at: string,
  pushed_at: string,
  git_url: string,
  ssh_url: string,
  clone_url: string,
  svn_url: string,
  homepage: Js.Null.t(string),
  size: int,
  stargazers_count: int,
  watchers_count: int,
  language: Js.Null.t(string),
  has_issues: bool,
  has_projects: bool,
  has_downloads: bool,
  has_wiki: bool,
  has_pages: bool,
  forks_count: int,
  mirror_url: Js.Null.t(string),
  archived: bool,
  open_issues_count: int,
  license: Js.Null.t(string),
  forks: int,
  open_issues: int,
  watchers: int,
  default_branch: string,
};
type webhookPayloadPullRequestReviewPullRequestHeadUser = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPullRequestReviewPullRequestHead = {
  label: string,
  ref: string,
  sha: string,
  user: webhookPayloadPullRequestReviewPullRequestHeadUser,
  repo: webhookPayloadPullRequestReviewPullRequestHeadRepo,
};
type webhookPayloadPullRequestReviewPullRequestUser = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPullRequestReviewPullRequest = {
  url: string,
  id: int,
  node_id: string,
  html_url: string,
  diff_url: string,
  patch_url: string,
  issue_url: string,
  int,
  state: string,
  locked: bool,
  title: string,
  user: webhookPayloadPullRequestReviewPullRequestUser,
  body: string,
  created_at: string,
  updated_at: string,
  closed_at: Js.Null.t(string),
  merged_at: Js.Null.t(string),
  merge_commit_sha: string,
  assignee: Js.Null.t(string),
  assignees: array(Js.Types.obj_val),
  requested_reviewers: array(Js.Types.obj_val),
  requested_teams: array(Js.Types.obj_val),
  labels: array(Js.Types.obj_val),
  milestone: Js.Null.t(string),
  commits_url: string,
  review_comments_url: string,
  review_comment_url: string,
  comments_url: string,
  statuses_url: string,
  head: webhookPayloadPullRequestReviewPullRequestHead,
  base: webhookPayloadPullRequestReviewPullRequestBase,
  _links: webhookPayloadPullRequestReviewPullRequestLinks,
  author_association: string,
};
type webhookPayloadPullRequestReviewReviewLinksPullRequest = {href: string};
type webhookPayloadPullRequestReviewReviewLinksHtml = {href: string};
type webhookPayloadPullRequestReviewReviewLinks = {
  html: webhookPayloadPullRequestReviewReviewLinksHtml,
  pull_request: webhookPayloadPullRequestReviewReviewLinksPullRequest,
};
type webhookPayloadPullRequestReviewReviewUser = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPullRequestReviewReview = {
  id: int,
  node_id: string,
  user: webhookPayloadPullRequestReviewReviewUser,
  body: Js.Null.t(string),
  commit_id: string,
  submitted_at: string,
  state: string,
  html_url: string,
  pull_request_url: string,
  author_association: string,
  _links: webhookPayloadPullRequestReviewReviewLinks,
};
type webhookPayloadPullRequestSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPullRequestPullRequestLinksStatuses = {href: string};
type webhookPayloadPullRequestPullRequestLinksCommits = {href: string};
type webhookPayloadPullRequestPullRequestLinksReviewComment = {href: string};
type webhookPayloadPullRequestPullRequestLinksReviewComments = {href: string};
type webhookPayloadPullRequestPullRequestLinksComments = {href: string};
type webhookPayloadPullRequestPullRequestLinksIssue = {href: string};
type webhookPayloadPullRequestPullRequestLinksHtml = {href: string};
type webhookPayloadPullRequestPullRequestLinksSelf = {href: string};
type webhookPayloadPullRequestPullRequestLinks = {
  self: webhookPayloadPullRequestPullRequestLinksSelf,
  html: webhookPayloadPullRequestPullRequestLinksHtml,
  issue: webhookPayloadPullRequestPullRequestLinksIssue,
  comments: webhookPayloadPullRequestPullRequestLinksComments,
  review_comments: webhookPayloadPullRequestPullRequestLinksReviewComments,
  review_comment: webhookPayloadPullRequestPullRequestLinksReviewComment,
  commits: webhookPayloadPullRequestPullRequestLinksCommits,
  statuses: webhookPayloadPullRequestPullRequestLinksStatuses,
};
type webhookPayloadPullRequestPullRequestBaseRepoOwner = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPullRequestPullRequestBaseRepo = {
  id: int,
  node_id: string,
  name: string,
  full_name: string,
  owner: webhookPayloadPullRequestPullRequestBaseRepoOwner,
  private: bool,
  html_url: string,
  description: Js.Null.t(string),
  fork: bool,
  url: string,
  forks_url: string,
  keys_url: string,
  collaborators_url: string,
  teams_url: string,
  hooks_url: string,
  issue_events_url: string,
  events_url: string,
  assignees_url: string,
  branches_url: string,
  tags_url: string,
  blobs_url: string,
  git_tags_url: string,
  git_refs_url: string,
  trees_url: string,
  statuses_url: string,
  languages_url: string,
  stargazers_url: string,
  contributors_url: string,
  subscribers_url: string,
  subscription_url: string,
  commits_url: string,
  git_commits_url: string,
  comments_url: string,
  issue_comment_url: string,
  contents_url: string,
  compare_url: string,
  merges_url: string,
  archive_url: string,
  downloads_url: string,
  issues_url: string,
  pulls_url: string,
  milestones_url: string,
  notifications_url: string,
  labels_url: string,
  releases_url: string,
  deployments_url: string,
  created_at: string,
  updated_at: string,
  pushed_at: string,
  git_url: string,
  ssh_url: string,
  clone_url: string,
  svn_url: string,
  homepage: Js.Null.t(string),
  size: int,
  stargazers_count: int,
  watchers_count: int,
  language: Js.Null.t(string),
  has_issues: bool,
  has_projects: bool,
  has_downloads: bool,
  has_wiki: bool,
  has_pages: bool,
  forks_count: int,
  mirror_url: Js.Null.t(string),
  archived: bool,
  open_issues_count: int,
  license: Js.Null.t(string),
  forks: int,
  open_issues: int,
  watchers: int,
  default_branch: string,
};
type webhookPayloadPullRequestPullRequestBaseUser = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPullRequestPullRequestBase = {
  label: string,
  ref: string,
  sha: string,
  user: webhookPayloadPullRequestPullRequestBaseUser,
  repo: webhookPayloadPullRequestPullRequestBaseRepo,
};
type webhookPayloadPullRequestPullRequestHeadRepoOwner = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPullRequestPullRequestHeadRepo = {
  id: int,
  node_id: string,
  name: string,
  full_name: string,
  owner: webhookPayloadPullRequestPullRequestHeadRepoOwner,
  private: bool,
  html_url: string,
  description: Js.Null.t(string),
  fork: bool,
  url: string,
  forks_url: string,
  keys_url: string,
  collaborators_url: string,
  teams_url: string,
  hooks_url: string,
  issue_events_url: string,
  events_url: string,
  assignees_url: string,
  branches_url: string,
  tags_url: string,
  blobs_url: string,
  git_tags_url: string,
  git_refs_url: string,
  trees_url: string,
  statuses_url: string,
  languages_url: string,
  stargazers_url: string,
  contributors_url: string,
  subscribers_url: string,
  subscription_url: string,
  commits_url: string,
  git_commits_url: string,
  comments_url: string,
  issue_comment_url: string,
  contents_url: string,
  compare_url: string,
  merges_url: string,
  archive_url: string,
  downloads_url: string,
  issues_url: string,
  pulls_url: string,
  milestones_url: string,
  notifications_url: string,
  labels_url: string,
  releases_url: string,
  deployments_url: string,
  created_at: string,
  updated_at: string,
  pushed_at: string,
  git_url: string,
  ssh_url: string,
  clone_url: string,
  svn_url: string,
  homepage: Js.Null.t(string),
  size: int,
  stargazers_count: int,
  watchers_count: int,
  language: Js.Null.t(string),
  has_issues: bool,
  has_projects: bool,
  has_downloads: bool,
  has_wiki: bool,
  has_pages: bool,
  forks_count: int,
  mirror_url: Js.Null.t(string),
  archived: bool,
  open_issues_count: int,
  license: Js.Null.t(string),
  forks: int,
  open_issues: int,
  watchers: int,
  default_branch: string,
};
type webhookPayloadPullRequestPullRequestHeadUser = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPullRequestPullRequestHead = {
  label: string,
  ref: string,
  sha: string,
  user: webhookPayloadPullRequestPullRequestHeadUser,
  repo: webhookPayloadPullRequestPullRequestHeadRepo,
};
type webhookPayloadPullRequestPullRequestUser = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPullRequestPullRequest = {
  url: string,
  id: int,
  node_id: string,
  html_url: string,
  diff_url: string,
  patch_url: string,
  issue_url: string,
  int,
  state: string,
  locked: bool,
  title: string,
  user: webhookPayloadPullRequestPullRequestUser,
  body: string,
  created_at: string,
  updated_at: string,
  closed_at: string,
  merged_at: Js.Null.t(string),
  merge_commit_sha: string,
  assignee: Js.Null.t(string),
  assignees: array(Js.Types.obj_val),
  requested_reviewers: array(Js.Types.obj_val),
  requested_teams: array(Js.Types.obj_val),
  labels: array(Js.Types.obj_val),
  milestone: Js.Null.t(string),
  commits_url: string,
  review_comments_url: string,
  review_comment_url: string,
  comments_url: string,
  statuses_url: string,
  head: webhookPayloadPullRequestPullRequestHead,
  base: webhookPayloadPullRequestPullRequestBase,
  _links: webhookPayloadPullRequestPullRequestLinks,
  author_association: string,
  merged: bool,
  mergeable: bool,
  rebaseable: bool,
  mergeable_state: string,
  merged_by: Js.Null.t(string),
  comments: int,
  review_comments: int,
  maintainer_can_modify: bool,
  commits: int,
  additions: int,
  deletions: int,
  changed_files: int,
};
type webhookPayloadPublicSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadProjectSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadProjectProjectCreator = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadProjectProject = {
  owner_url: string,
  url: string,
  html_url: string,
  columns_url: string,
  id: int,
  node_id: string,
  name: string,
  body: string,
  int,
  state: string,
  creator: webhookPayloadProjectProjectCreator,
  created_at: string,
  updated_at: string,
};
type webhookPayloadProjectColumnSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadProjectColumnProjectColumn = {
  url: string,
  project_url: string,
  cards_url: string,
  id: int,
  node_id: string,
  name: string,
  created_at: string,
  updated_at: string,
};
type webhookPayloadProjectCardSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadProjectCardProjectCardCreator = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadProjectCardProjectCard = {
  url: string,
  project_url: string,
  column_url: string,
  column_id: int,
  id: int,
  node_id: string,
  note: string,
  creator: webhookPayloadProjectCardProjectCardCreator,
  created_at: string,
  updated_at: string,
};
type webhookPayloadPageBuildSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPageBuildBuildPusher = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadPageBuildBuildError = {message: Js.Null.t(string)};
type webhookPayloadPageBuildBuild = {
  url: string,
  status: string,
  error: webhookPayloadPageBuildBuildError,
  pusher: webhookPayloadPageBuildBuildPusher,
  commit: string,
  duration: int,
  created_at: string,
  updated_at: string,
};
type webhookPayloadOrgBlockSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadOrgBlockOrganization = {
  login: string,
  id: int,
  node_id: string,
  url: string,
  repos_url: string,
  events_url: string,
  hooks_url: string,
  issues_url: string,
  members_url: string,
  public_members_url: string,
  avatar_url: string,
  description: string,
};
type webhookPayloadOrgBlockBlockedUser = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadOrgBlock = {
  action: string,
  blocked_user: webhookPayloadOrgBlockBlockedUser,
  organization: webhookPayloadOrgBlockOrganization,
  sender: webhookPayloadOrgBlockSender,
};
type webhookPayloadOrganizationSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadOrganizationOrganization = {
  login: string,
  id: int,
  node_id: string,
  url: string,
  repos_url: string,
  events_url: string,
  hooks_url: string,
  issues_url: string,
  members_url: string,
  public_members_url: string,
  avatar_url: string,
  description: string,
};
type webhookPayloadOrganizationMembershipUser = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadOrganizationMembership = {
  url: string,
  state: string,
  role: string,
  organization_url: string,
  user: webhookPayloadOrganizationMembershipUser,
};
type webhookPayloadOrganization = {
  action: string,
  membership: webhookPayloadOrganizationMembership,
  organization: webhookPayloadOrganizationOrganization,
  sender: webhookPayloadOrganizationSender,
};
type webhookPayloadMilestoneSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadMilestoneMilestoneCreator = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadMilestoneMilestone = {
  url: string,
  html_url: string,
  labels_url: string,
  id: int,
  node_id: string,
  int,
  title: string,
  description: string,
  creator: webhookPayloadMilestoneMilestoneCreator,
  open_issues: int,
  closed_issues: int,
  state: string,
  created_at: string,
  updated_at: string,
  due_on: string,
  closed_at: Js.Null.t(string),
};
type webhookPayloadMembershipOrganization = {
  login: string,
  id: int,
  node_id: string,
  url: string,
  repos_url: string,
  events_url: string,
  hooks_url: string,
  issues_url: string,
  members_url: string,
  public_members_url: string,
  avatar_url: string,
  description: string,
};
type webhookPayloadMembershipTeam = {
  name: string,
  id: int,
  node_id: string,
  slug: string,
  description: string,
  privacy: string,
  url: string,
  members_url: string,
  repositories_url: string,
  permission: string,
};
type webhookPayloadMembershipSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadMembershipMember = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadMembership = {
  action: string,
  scope: string,
  member: webhookPayloadMembershipMember,
  sender: webhookPayloadMembershipSender,
  team: webhookPayloadMembershipTeam,
  organization: webhookPayloadMembershipOrganization,
};
type webhookPayloadMemberSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadMemberChangesPermission = {from: string};
type webhookPayloadMemberChanges = {
  permission: webhookPayloadMemberChangesPermission,
};
type webhookPayloadMemberMember = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadMarketplacePurchaseMarketplacePurchasePlan = {
  id: int,
  name: string,
  description: string,
  monthly_price_in_cents: int,
  yearly_price_in_cents: int,
  price_model: string,
  has_free_trial: bool,
  unit_name: string,
  bullets: array(string),
};
type webhookPayloadMarketplacePurchaseMarketplacePurchaseAccount = {
  type_: string,
  id: int,
  login: string,
  organization_billing_email: string,
};
type webhookPayloadMarketplacePurchaseMarketplacePurchase = {
  account: webhookPayloadMarketplacePurchaseMarketplacePurchaseAccount,
  billing_cycle: string,
  unit_count: int,
  on_free_trial: bool,
  free_trial_ends_on: Js.Null.t(string),
  next_billing_date: string,
  plan: webhookPayloadMarketplacePurchaseMarketplacePurchasePlan,
};
type webhookPayloadMarketplacePurchaseSender = {
  login: string,
  id: int,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
  email: string,
};
type webhookPayloadMarketplacePurchase = {
  action: string,
  effective_date: string,
  sender: webhookPayloadMarketplacePurchaseSender,
  marketplace_purchase: webhookPayloadMarketplacePurchaseMarketplacePurchase,
};
type webhookPayloadLabelSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadLabelLabel = {
  id: int,
  node_id: string,
  url: string,
  name: string,
  color: string,
  default: bool,
};
type webhookPayloadIssuesSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadIssuesChanges = {dummy: bool};
type webhookPayloadIssuesIssueLabelsItem = {
  id: int,
  node_id: string,
  url: string,
  name: string,
  color: string,
  default: bool,
};
type webhookPayloadIssuesIssueUser = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadIssuesIssue = {
  url: string,
  repository_url: string,
  labels_url: string,
  comments_url: string,
  events_url: string,
  html_url: string,
  id: int,
  node_id: string,
  int,
  title: string,
  user: webhookPayloadIssuesIssueUser,
  labels: array(webhookPayloadIssuesIssueLabelsItem),
  state: string,
  locked: bool,
  assignee: Js.Null.t(string),
  assignees: array(Js.Types.obj_val),
  milestone: Js.Null.t(string),
  comments: int,
  created_at: string,
  updated_at: string,
  closed_at: Js.Null.t(string),
  author_association: string,
  body: string,
};
type webhookPayloadIssueCommentSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadIssueCommentCommentUser = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadIssueCommentComment = {
  url: string,
  html_url: string,
  issue_url: string,
  id: int,
  node_id: string,
  user: webhookPayloadIssueCommentCommentUser,
  created_at: string,
  updated_at: string,
  author_association: string,
  body: string,
};
type webhookPayloadIssueCommentIssueLabelsItem = {
  id: int,
  node_id: string,
  url: string,
  name: string,
  color: string,
  default: bool,
};
type webhookPayloadIssueCommentIssueUser = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadIssueCommentIssue = {
  url: string,
  repository_url: string,
  labels_url: string,
  comments_url: string,
  events_url: string,
  html_url: string,
  id: int,
  node_id: string,
  int,
  title: string,
  user: webhookPayloadIssueCommentIssueUser,
  labels: array(webhookPayloadIssueCommentIssueLabelsItem),
  state: string,
  locked: bool,
  assignee: Js.Null.t(string),
  assignees: array(Js.Types.obj_val),
  milestone: Js.Null.t(string),
  comments: int,
  created_at: string,
  updated_at: string,
  closed_at: Js.Null.t(string),
  author_association: string,
  body: string,
};
type webhookPayloadInstallationRepositoriesSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadInstallationRepositoriesRepositoriesRemovedItem = {
  id: int,
  name: string,
  full_name: string,
  private: bool,
};
type webhookPayloadInstallationRepositoriesInstallationPermissions = {
  metadata: string,
  contents: string,
  issues: string,
};
type webhookPayloadInstallationRepositoriesInstallationAccount = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadInstallationRepositoriesInstallation = {
  id: int,
  account: webhookPayloadInstallationRepositoriesInstallationAccount,
  repository_selection: string,
  access_tokens_url: string,
  repositories_url: string,
  html_url: string,
  app_id: int,
  target_id: int,
  target_type: string,
  permissions: webhookPayloadInstallationRepositoriesInstallationPermissions,
  events: array(string),
  created_at: int,
  updated_at: int,
  single_file_name: string,
};
type webhookPayloadInstallationRepositories = {
  action: string,
  installation: webhookPayloadInstallationRepositoriesInstallation,
  repository_selection: string,
  repositories_added: array(Js.Types.obj_val),
  repositories_removed:
    array(webhookPayloadInstallationRepositoriesRepositoriesRemovedItem),
  sender: webhookPayloadInstallationRepositoriesSender,
};
type webhookPayloadInstallationSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadInstallationRepositoriesItem = {
  id: int,
  name: string,
  full_name: string,
  private: bool,
};
type webhookPayloadInstallationInstallationPermissions = {
  metadata: string,
  contents: string,
  issues: string,
};
type webhookPayloadInstallationInstallationAccount = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadInstallationInstallation = {
  id: int,
  account: webhookPayloadInstallationInstallationAccount,
  repository_selection: string,
  access_tokens_url: string,
  repositories_url: string,
  html_url: string,
  app_id: int,
  target_id: int,
  target_type: string,
  permissions: webhookPayloadInstallationInstallationPermissions,
  events: array(string),
  created_at: int,
  updated_at: int,
  single_file_name: string,
};
type webhookPayloadInstallation = {
  action: string,
  installation: webhookPayloadInstallationInstallation,
  repositories: array(webhookPayloadInstallationRepositoriesItem),
  sender: webhookPayloadInstallationSender,
};
type webhookPayloadGollumSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadGollumPagesItem = {
  page_name: string,
  title: string,
  summary: Js.Null.t(string),
  action: string,
  sha: string,
  html_url: string,
};
type webhookPayloadGithubAppAuthorizationSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadGithubAppAuthorization = {
  action: string,
  sender: webhookPayloadGithubAppAuthorizationSender,
};
type webhookPayloadForkSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadForkForkeeOwner = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadForkForkee = {
  id: int,
  node_id: string,
  name: string,
  full_name: string,
  owner: webhookPayloadForkForkeeOwner,
  private: bool,
  html_url: string,
  description: Js.Null.t(string),
  fork: bool,
  url: string,
  forks_url: string,
  keys_url: string,
  collaborators_url: string,
  teams_url: string,
  hooks_url: string,
  issue_events_url: string,
  events_url: string,
  assignees_url: string,
  branches_url: string,
  tags_url: string,
  blobs_url: string,
  git_tags_url: string,
  git_refs_url: string,
  trees_url: string,
  statuses_url: string,
  languages_url: string,
  stargazers_url: string,
  contributors_url: string,
  subscribers_url: string,
  subscription_url: string,
  commits_url: string,
  git_commits_url: string,
  comments_url: string,
  issue_comment_url: string,
  contents_url: string,
  compare_url: string,
  merges_url: string,
  archive_url: string,
  downloads_url: string,
  issues_url: string,
  pulls_url: string,
  milestones_url: string,
  notifications_url: string,
  labels_url: string,
  releases_url: string,
  deployments_url: string,
  created_at: string,
  updated_at: string,
  pushed_at: string,
  git_url: string,
  ssh_url: string,
  clone_url: string,
  svn_url: string,
  homepage: Js.Null.t(string),
  size: int,
  stargazers_count: int,
  watchers_count: int,
  language: Js.Null.t(string),
  has_issues: bool,
  has_projects: bool,
  has_downloads: bool,
  has_wiki: bool,
  has_pages: bool,
  forks_count: int,
  mirror_url: Js.Null.t(string),
  archived: bool,
  open_issues_count: int,
  license: Js.Null.t(string),
  forks: int,
  open_issues: int,
  watchers: int,
  default_branch: string,
  public: bool,
};
type webhookPayloadDeploymentStatusSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadDeploymentStatusDeploymentCreator = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadDeploymentStatusDeploymentPayload = {dummy: bool};
type webhookPayloadDeploymentStatusDeployment = {
  url: string,
  id: int,
  node_id: string,
  sha: string,
  ref: string,
  task: string,
  payload: webhookPayloadDeploymentStatusDeploymentPayload,
  environment: string,
  description: Js.Null.t(string),
  creator: webhookPayloadDeploymentStatusDeploymentCreator,
  created_at: string,
  updated_at: string,
  statuses_url: string,
  repository_url: string,
};
type webhookPayloadDeploymentStatusDeploymentStatusCreator = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadDeploymentStatusDeploymentStatus = {
  url: string,
  id: int,
  node_id: string,
  state: string,
  creator: webhookPayloadDeploymentStatusDeploymentStatusCreator,
  description: string,
  target_url: string,
  created_at: string,
  updated_at: string,
  deployment_url: string,
  repository_url: string,
};
type webhookPayloadDeploymentSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadDeploymentDeploymentCreator = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadDeploymentDeploymentPayload = {dummy: bool};
type webhookPayloadDeploymentDeployment = {
  url: string,
  id: int,
  node_id: string,
  sha: string,
  ref: string,
  task: string,
  payload: webhookPayloadDeploymentDeploymentPayload,
  environment: string,
  description: Js.Null.t(string),
  creator: webhookPayloadDeploymentDeploymentCreator,
  created_at: string,
  updated_at: string,
  statuses_url: string,
  repository_url: string,
};
type webhookPayloadDeleteSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadCreateSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadCommitCommentSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadCommitCommentCommentUser = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadCommitCommentComment = {
  url: string,
  html_url: string,
  id: int,
  node_id: string,
  user: webhookPayloadCommitCommentCommentUser,
  position: Js.Null.t(string),
  line: Js.Null.t(string),
  path: Js.Null.t(string),
  commit_id: string,
  created_at: string,
  updated_at: string,
  author_association: string,
  body: string,
};
type webhookPayloadCheckSuiteInstallation = {id: int};
type webhookPayloadCheckSuiteSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadCheckSuiteOrganization = {
  login: string,
  id: int,
  node_id: string,
  url: string,
  repos_url: string,
  events_url: string,
  hooks_url: string,
  issues_url: string,
  members_url: string,
  public_members_url: string,
  avatar_url: string,
  description: string,
};
type webhookPayloadCheckSuiteCheckSuiteHeadCommitCommitter = {
  name: string,
  email: string,
};
type webhookPayloadCheckSuiteCheckSuiteHeadCommitAuthor = {
  name: string,
  email: string,
};
type webhookPayloadCheckSuiteCheckSuiteHeadCommit = {
  id: string,
  tree_id: string,
  message: string,
  timestamp: string,
  author: webhookPayloadCheckSuiteCheckSuiteHeadCommitAuthor,
  committer: webhookPayloadCheckSuiteCheckSuiteHeadCommitCommitter,
};
type webhookPayloadCheckSuiteCheckSuiteAppOwner = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadCheckSuiteCheckSuiteApp = {
  id: int,
  node_id: string,
  owner: webhookPayloadCheckSuiteCheckSuiteAppOwner,
  name: string,
  description: Js.Null.t(string),
  external_url: string,
  html_url: string,
  created_at: string,
  updated_at: string,
};
type webhookPayloadCheckSuiteCheckSuite = {
  id: int,
  head_branch: string,
  head_sha: string,
  status: string,
  conclusion: string,
  url: string,
  before: string,
  after: string,
  pull_requests: array(Js.Types.obj_val),
  app: webhookPayloadCheckSuiteCheckSuiteApp,
  created_at: string,
  updated_at: string,
  latest_check_runs_count: int,
  check_runs_url: string,
  head_commit: webhookPayloadCheckSuiteCheckSuiteHeadCommit,
};
type webhookPayloadCheckRunInstallation = {id: int};
type webhookPayloadCheckRunSender = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadCheckRunOrganization = {
  login: string,
  id: int,
  node_id: string,
  url: string,
  repos_url: string,
  events_url: string,
  hooks_url: string,
  issues_url: string,
  members_url: string,
  public_members_url: string,
  avatar_url: string,
  description: string,
};
type payloadRepositoryOwner = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
  name: option(string),
  email: option(string),
};
type payloadRepository = {
  id: int,
  node_id: string,
  name: string,
  full_name: string,
  owner: payloadRepositoryOwner,
  private: bool,
  html_url: string,
  description: Js.Null.t(string),
  fork: bool,
  url: string,
  forks_url: string,
  keys_url: string,
  collaborators_url: string,
  teams_url: string,
  hooks_url: string,
  issue_events_url: string,
  events_url: string,
  assignees_url: string,
  branches_url: string,
  tags_url: string,
  blobs_url: string,
  git_tags_url: string,
  git_refs_url: string,
  trees_url: string,
  statuses_url: string,
  languages_url: string,
  stargazers_url: string,
  contributors_url: string,
  subscribers_url: string,
  subscription_url: string,
  commits_url: string,
  git_commits_url: string,
  comments_url: string,
  issue_comment_url: string,
  contents_url: string,
  compare_url: string,
  merges_url: string,
  archive_url: string,
  downloads_url: string,
  issues_url: string,
  pulls_url: string,
  milestones_url: string,
  notifications_url: string,
  labels_url: string,
  releases_url: string,
  deployments_url: string,
  created_at: str_or_int,
  updated_at: string,
  pushed_at: str_or_int,
  git_url: string,
  ssh_url: string,
  clone_url: string,
  svn_url: string,
  homepage: Js.Null.t(string),
  size: int,
  stargazers_count: int,
  watchers_count: int,
  language: Js.Null.t(string),
  has_issues: bool,
  has_projects: bool,
  has_downloads: bool,
  has_wiki: bool,
  has_pages: bool,
  forks_count: int,
  mirror_url: Js.Null.t(string),
  archived: bool,
  open_issues_count: int,
  license: Js.Null.t(string),
  forks: int,
  open_issues: int,
  watchers: int,
  default_branch: string,
  stargazers: option(int),
  master_branch: option(string),
  permissions: option(payloadRepositoryPermissions),
};
type webhookPayloadCheckRunCheckRunAppOwner = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadCheckRunCheckRunApp = {
  id: int,
  node_id: string,
  owner: webhookPayloadCheckRunCheckRunAppOwner,
  name: string,
  description: Js.Null.t(string),
  external_url: string,
  html_url: string,
  created_at: string,
  updated_at: string,
};
type webhookPayloadCheckRunCheckRunCheckSuiteAppOwner = {
  login: string,
  id: int,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type_: string,
  site_admin: bool,
};
type webhookPayloadCheckRunCheckRunCheckSuiteApp = {
  id: int,
  node_id: string,
  owner: webhookPayloadCheckRunCheckRunCheckSuiteAppOwner,
  name: string,
  description: Js.Null.t(string),
  external_url: string,
  html_url: string,
  created_at: string,
  updated_at: string,
};
type webhookPayloadCheckRunCheckRunCheckSuite = {
  id: int,
  head_branch: string,
  head_sha: string,
  status: string,
  conclusion: string,
  url: string,
  before: string,
  after: string,
  pull_requests: array(Js.Types.obj_val),
  app: webhookPayloadCheckRunCheckRunCheckSuiteApp,
  created_at: string,
  updated_at: string,
};
type webhookPayloadCheckRunCheckRunOutput = {
  title: string,
  summary: string,
  text: string,
  annotations_count: int,
  annotations_url: string,
};
type webhookPayloadCheckRunCheckRun = {
  id: int,
  head_sha: string,
  external_id: string,
  url: string,
  html_url: string,
  status: string,
  conclusion: string,
  started_at: string,
  completed_at: string,
  output: webhookPayloadCheckRunCheckRunOutput,
  name: string,
  check_suite: webhookPayloadCheckRunCheckRunCheckSuite,
  app: webhookPayloadCheckRunCheckRunApp,
  pull_requests: array(Js.Types.obj_val),
};
type webhookPayloadCheckRun = {
  action: string,
  check_run: webhookPayloadCheckRunCheckRun,
  repository: payloadRepository,
  organization: webhookPayloadCheckRunOrganization,
  sender: webhookPayloadCheckRunSender,
  installation: webhookPayloadCheckRunInstallation,
};
type webhookPayloadWatch = {
  action: string,
  repository: payloadRepository,
  sender: webhookPayloadWatchSender,
};
type webhookPayloadTeamAdd = {
  team: webhookPayloadTeamAddTeam,
  repository: payloadRepository,
  organization: webhookPayloadTeamAddOrganization,
  sender: webhookPayloadTeamAddSender,
};
type webhookPayloadTeam = {
  action: string,
  team: webhookPayloadTeamTeam,
  repository: payloadRepository,
  organization: webhookPayloadTeamOrganization,
  sender: webhookPayloadTeamSender,
};
type webhookPayloadStatusCommitCommit = {
  author: webhookPayloadStatusCommitCommitAuthor,
  committer: webhookPayloadStatusCommitCommitCommitter,
  message: string,
  tree: webhookPayloadStatusCommitCommitTree,
  url: string,
  comment_count: int,
  verification: webhookPayloadStatusCommitCommitVerification,
};
type webhookPayloadStatusCommit = {
  sha: string,
  node_id: string,
  commit: webhookPayloadStatusCommitCommit,
  url: string,
  html_url: string,
  comments_url: string,
  author: webhookPayloadStatusCommitAuthor,
  committer: webhookPayloadStatusCommitCommitter,
  parents: array(Js.Types.obj_val),
};
type webhookPayloadStatus = {
  id: int,
  sha: string,
  name: string,
  target_url: Js.Null.t(string),
  context: string,
  description: Js.Null.t(string),
  state: string,
  commit: webhookPayloadStatusCommit,
  branches: array(webhookPayloadStatusBranchesItem),
  created_at: string,
  updated_at: string,
  repository: payloadRepository,
  sender: webhookPayloadStatusSender,
};
type webhookPayloadRepositoryImport = {
  status: string,
  repository: payloadRepository,
  organization: webhookPayloadRepositoryImportOrganization,
  sender: webhookPayloadRepositoryImportSender,
};
type webhookPayloadRepository = {
  action: string,
  repository: payloadRepository,
  sender: webhookPayloadRepositorySender,
};
type webhookPayloadRelease = {
  action: string,
  release: webhookPayloadReleaseRelease,
  repository: payloadRepository,
  sender: webhookPayloadReleaseSender,
};
type webhookPayloadPush = {
  ref: string,
  before: string,
  after: string,
  created: bool,
  deleted: bool,
  forced: bool,
  base_ref: Js.Null.t(string),
  compare: string,
  commits: array(Js.Types.obj_val),
  head_commit: Js.Null.t(string),
  repository: payloadRepository,
  pusher: webhookPayloadPushPusher,
  sender: webhookPayloadPushSender,
};
type webhookPayloadPullRequestReviewComment = {
  action: string,
  comment: webhookPayloadPullRequestReviewCommentComment,
  pull_request: webhookPayloadPullRequestReviewCommentPullRequest,
  repository: payloadRepository,
  sender: webhookPayloadPullRequestReviewCommentSender,
};
type webhookPayloadPullRequestReview = {
  action: string,
  review: webhookPayloadPullRequestReviewReview,
  pull_request: webhookPayloadPullRequestReviewPullRequest,
  repository: payloadRepository,
  sender: webhookPayloadPullRequestReviewSender,
};
type webhookPayloadPullRequest = {
  action: string,
  int,
  pull_request: webhookPayloadPullRequestPullRequest,
  repository: payloadRepository,
  sender: webhookPayloadPullRequestSender,
};
type webhookPayloadPublic = {
  repository: payloadRepository,
  sender: webhookPayloadPublicSender,
};
type webhookPayloadProject = {
  action: string,
  project: webhookPayloadProjectProject,
  repository: payloadRepository,
  sender: webhookPayloadProjectSender,
};
type webhookPayloadProjectColumn = {
  action: string,
  project_column: webhookPayloadProjectColumnProjectColumn,
  repository: payloadRepository,
  sender: webhookPayloadProjectColumnSender,
};
type webhookPayloadProjectCard = {
  action: string,
  project_card: webhookPayloadProjectCardProjectCard,
  repository: payloadRepository,
  sender: webhookPayloadProjectCardSender,
};
type webhookPayloadPageBuild = {
  id: int,
  build: webhookPayloadPageBuildBuild,
  repository: payloadRepository,
  sender: webhookPayloadPageBuildSender,
};
type webhookPayloadMilestone = {
  action: string,
  milestone: webhookPayloadMilestoneMilestone,
  repository: payloadRepository,
  sender: webhookPayloadMilestoneSender,
};
type webhookPayloadMember = {
  action: string,
  member: webhookPayloadMemberMember,
  changes: webhookPayloadMemberChanges,
  repository: payloadRepository,
  sender: webhookPayloadMemberSender,
};
type webhookPayloadLabel = {
  action: string,
  label: webhookPayloadLabelLabel,
  repository: payloadRepository,
  sender: webhookPayloadLabelSender,
};
type webhookPayloadIssues = {
  action: string,
  issue: webhookPayloadIssuesIssue,
  changes: webhookPayloadIssuesChanges,
  repository: payloadRepository,
  sender: webhookPayloadIssuesSender,
};
type webhookPayloadIssueComment = {
  action: string,
  issue: webhookPayloadIssueCommentIssue,
  comment: webhookPayloadIssueCommentComment,
  repository: payloadRepository,
  sender: webhookPayloadIssueCommentSender,
};
type webhookPayloadGollum = {
  pages: array(webhookPayloadGollumPagesItem),
  repository: payloadRepository,
  sender: webhookPayloadGollumSender,
};
type webhookPayloadFork = {
  forkee: webhookPayloadForkForkee,
  repository: payloadRepository,
  sender: webhookPayloadForkSender,
};
type webhookPayloadDeploymentStatus = {
  deployment_status: webhookPayloadDeploymentStatusDeploymentStatus,
  deployment: webhookPayloadDeploymentStatusDeployment,
  repository: payloadRepository,
  sender: webhookPayloadDeploymentStatusSender,
};
type webhookPayloadDeployment = {
  deployment: webhookPayloadDeploymentDeployment,
  repository: payloadRepository,
  sender: webhookPayloadDeploymentSender,
};
type webhookPayloadDelete = {
  ref: string,
  ref_type: string,
  pusher_type: string,
  repository: payloadRepository,
  sender: webhookPayloadDeleteSender,
};
type webhookPayloadCreate = {
  ref: string,
  ref_type: string,
  master_branch: string,
  description: Js.Null.t(string),
  pusher_type: string,
  repository: payloadRepository,
  sender: webhookPayloadCreateSender,
};
type webhookPayloadCommitComment = {
  action: string,
  comment: webhookPayloadCommitCommentComment,
  repository: payloadRepository,
  sender: webhookPayloadCommitCommentSender,
};
type webhookPayloadCheckSuite = {
  action: string,
  check_suite: webhookPayloadCheckSuiteCheckSuite,
  repository: payloadRepository,
  organization: webhookPayloadCheckSuiteOrganization,
  sender: webhookPayloadCheckSuiteSender,
  installation: webhookPayloadCheckSuiteInstallation,
};
